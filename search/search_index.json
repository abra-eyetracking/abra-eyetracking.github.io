{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Abra Eyetracking Abra Eyetracking is an open source package for visualizing and analyzing eyetracking data. This package can used as anything general as extracting important information such as pupil size, eye movement, and event related markers or messsages. Data extraction can be specialized to how the user marked their start and end messages. Visualization of the data can be performed in two ways. The first is using python or Jupyter notebook to create plots. Methods in the Data object can create Session object that has a list of Trials or Epoch object that create a list of time locked epochs for each trial. The Session or Epoch object can allow for visualization of pupil size , movement , fixation points , etc . A tutorial is available to show the basic function of the package To visit the GitHub Repository visit abra-eyetracking","title":"Home"},{"location":"#welcome-to-abra-eyetracking","text":"Abra Eyetracking is an open source package for visualizing and analyzing eyetracking data. This package can used as anything general as extracting important information such as pupil size, eye movement, and event related markers or messsages. Data extraction can be specialized to how the user marked their start and end messages. Visualization of the data can be performed in two ways. The first is using python or Jupyter notebook to create plots. Methods in the Data object can create Session object that has a list of Trials or Epoch object that create a list of time locked epochs for each trial. The Session or Epoch object can allow for visualization of pupil size , movement , fixation points , etc . A tutorial is available to show the basic function of the package To visit the GitHub Repository visit abra-eyetracking","title":"Welcome to Abra Eyetracking"},{"location":"about/","text":"About Abra Eyetracking is an open source package for eyetracking data visualization and analysis. This package was developed by a team from the Institute for Interdisciplinary Brain and Behavioral Sciences . Contributors: Andy Liang Akima Connelly Nate Everett Arman Mansourian Jake Gavenas Contribution to the project Abra is an open source package and is free to the community. It was written and provided free to make handling eye-tracking data a little easier by people who will not make any money from it. Abra was started by a small team which could only implement so much, which is why we ask the community help us grow this package to potential we believe it has. Any contribution is welcomed, whether it is small or large. How to contribute To contribute please either contact us at ENTER EMAIL OR CONTACT or add a post to the forum. Any contribution is welcomed whether it is a small bug change or a new function that should be added. Troubleshooting Easiest way to resolve any issues is by either emailing us at EMAIL or asking in the FORUM . Please add as much description as possible of the error for us to understand and quickly fix the problem.","title":"About"},{"location":"about/#about","text":"Abra Eyetracking is an open source package for eyetracking data visualization and analysis. This package was developed by a team from the Institute for Interdisciplinary Brain and Behavioral Sciences . Contributors: Andy Liang Akima Connelly Nate Everett Arman Mansourian Jake Gavenas Contribution to the project Abra is an open source package and is free to the community. It was written and provided free to make handling eye-tracking data a little easier by people who will not make any money from it. Abra was started by a small team which could only implement so much, which is why we ask the community help us grow this package to potential we believe it has. Any contribution is welcomed, whether it is small or large. How to contribute To contribute please either contact us at ENTER EMAIL OR CONTACT or add a post to the forum. Any contribution is welcomed whether it is a small bug change or a new function that should be added. Troubleshooting Easiest way to resolve any issues is by either emailing us at EMAIL or asking in the FORUM . Please add as much description as possible of the error for us to understand and quickly fix the problem.","title":"About"},{"location":"api/","text":"API Reference abra.data abra.data.read function abra.data.read(filename, eyes_recorded = \"auto\", both_eyes_recorded = False, mode=\"d\", start_msg=r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions. Read function will read in the ascii file and extract the data. Parameters: file_name : Takes in the name of the file you are trying to extract data from mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. eyes_recorded : Define which eye data to extract if both eyes are being recorded. default is \"auto\" which will take whichever eye it finds first both_eyes_recorded : True = if both eyes were recorded. False = is only the left or right eyes was being recorded. start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" Returns: abra.data.Data : The Data object abra.data.remove_eye_blinks function remove_eye_blinks(abra_obj, buffer=50, interpolate='linear', inplace=False) Takes in the data object made from the read function and removes eye blinks from the data. Parameters: abra_obj : data object buffer : Time in ms of a buffer to remove eye blinks from data. Default is set to 50ms interpolate : Option of whether you would like to interpolate the data. Default is \"linear\" None is the other option inplace : Option to remove eye blinks inplace or not Return: abra.data.Data : The Data object with eye blinks removed dataobj = abra.data.read(filename) rm_blink = abra.data.remove_eye_blinks(dataobj) abra.data.Data The data object is an object created by the read function. The object stores timestamps, start and end trial markers, sample rate, messages, event (fixation and saccade), pupil size, and eye movements. Parameters: timestamps List , List of timestamps within the eye-tracker data. sample_rate: int, The value of the sample rate of the data. messages: List , List of messages that are within the trials in the eye-tracker data. events: dict, The events dictionary of holds all event triggers within the data. The key is the event type and the value is the information that the event contained. trial_markers: dict, trial_markers is a dictionary that holds the timestamps of the start and end of the specified events. The keys are \"start\" and \"end\". pupil_size: List , The pupil_size list hold float values of the pupil size within the trials recorded. The pupil_size list has the same indexing as timestamps. eg. index 0 for pupil_size is correlated to the timestamp at timestamp index 0 movement: list , Movement is a 2d list that hold values for the x-axis and y-axis. Movement[0] is a list of movement coordinates at the x-axis. Movement[1] is a list of movement coordinates at the y-axis. Both list indexing is correlated to the indexing of timestamps. Return: Data : returns a data object Methods: create_session(self, conditions=None) create_epoch(self, event_timestamps, conditions=None, pre_event=200, post_event=200, pupil_baseline=None) abra.data.Data.create_session Method create_session(self, conditions=None) create_session is a function within the data object. The function will sort the data into a list of trial objects. This function will return a session object. Parameter: conditions : condition you want to apply to the method. Default is None Returns: Session : The Session object that contains a list of Trial objects. data = abra.data.read(filename) data.create_session() abra.data.Data.create_epochs Method create_epochs(self, event_timestamps, conditions=None, pre_event=200, post_event=200, pupil_baseline=None) The create_epoch function creates a list of time-locked epochs and returns an epoch object. Parameters: event_timestamps : Starting timestamps for all time locked events. conditions :Desired event condition. pre_event : Milliseconds before defined starting timestamps. post_event : Milliseconds after defined starting timestamps. pupil_baseline : Baselining for pupil size data. The baseline period will be the milliseconds before pre_event Return: Epoch : The Epoch objects that contains a list of the time locked trials data = abra.data.read(filename) data.create_epochs(conditions = None, pre_event = 200, post_event = 200, pupil_baseline = None) abra.trial abra.trial.Trial Class Trial(self, timestamps, pupil_size, movement_X = [], movement_y = [], event_L = [], event_R = []) Parameters: timestamps : list of timestamps pupil_size : list of pupil sizes movement_X : list of movements in x-axis movement_y : list of movements in y-axis event_L : list of fixation events for the left eye event_R : list of fixation events for the right eye Return: Trial : returns a Trial object Method: abra.trial.Trial.summary abra.trail.Trial.summary Method summary(self, verbose = False) Returns a dictionary of statistics of pupil data. Parameters: verbose: boolean, True will print the summary. Return: summary : Dictionary of summary statistic for pupil size containing, [mean]: pupil mean, [variance]: pupil variance, [stdev]: pupil standard deviation, [length]: pupil size, [min]: pupil minimum, [max]: pupil maximum abra.session abra.session.base Class Base(self, data, sample_rate, conditions=None) Parameters: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Methods: summary(self, verbose = False) get_trial(self, trial_num) get_pupil(self) get_movement(self) get_timestamps(self) get_fixation(self) select(self, indexes) plot_pupil_size(self, trial_num = 1) plot_tragectory(self, trial_num = 1, image_file = None, screen_size = (1920,1080)) plot_xy(self, trial_num = 1) get_x_y(self, data) get_bubble_plot(self, trial_num = 1, image_file = None, screen_size = (1920, 1080)) abra.session.Base.summary summary(self, verbose = False) Returns a dictionary that holds summary statistics for pupil size of all the trials in the base class. Parameter: verbose: boolean, True will print the summary. Return: summary : Dictionary of summary statistic for pupil size containing, [mean]: pupil mean, [variance]: pupil variance, [stdev]: pupil standard deviation, [length]: pupil size, [min]: pupil minimum, [max]: pupil maximum abra.session.Base.get_trial get_trial(self, trial_num) Will return the data from specified trial. Parameter: trial_num: int, trial number you want to find. Return: Trial object : Return Trial object by specified trial number abra.session.Base.get_pupil get_pupil(self) Returns a list pupil sizes in each trial Return: numpy array : a nested list of pupil sizes for each trial. abra.session.Base.get_movement get_movement(self) Returns a list of eye movements in each trial Return: numpy array : a 2d array that holds eye movements in the x-axis at index 0 and movements in the y-axis at index 1. At each index there is a nested list for the movement direction per trial. abra.session.Base.get_timestamps get_timestamps(self) Returns a list of timestamps in each trial Return: numpy array : nested list of timestamps for each trial abra.session.Base.get_fixation get_fixation(self) Returns a list of eye movements during fixation for each trial. Return: numpy array : a 2d array that holds eye movements during fixation in the x-axis at index 0 and movements in the y-axis at index 1. At each index there is a nested list for the eye movement direction per trial. abra.session.Base.select select(self, indexes) Selects specified trial by index value. Return: Trial object : Return Trial object by specified index list of Trial objects abra.session.Base.plot_pupil_size plot_pupil_size(self, trial_num = 1) Plots pupil size of the specified trial. Return: matplotlib plot : returns a plot abra.session.Base.plot_tragectory plot_tragectory(self, trial_num = 1, image_file = None, screen_size = (1920,1080)) Plots eye movement for specified trial. Can plot over image and specify dimension the screen used with eye-tracker. Paramters: trial_num: int, trial to plot eye movement image_file: string, file path to image screen_size: list, Resolution dimension of the screen used. (Width, Height) Return: matplotlib plot : returns a plot abra.session.Base.plot_xy plot_xy(self, trial_num = 1) Plots horizontal and vertical eye movement across the time of the trial. Paramter: trial_num: int, trial to plot for eye movement Return: matplotlib plot : returns a plot abra.session.Base.get_x_y get_x_y(self, data) Gets the mean and length of eye movement for each fixation in the specified trial. Paramter data : list of eye movements during fixation for specified trial Return: numpy array, numpy array : returns 2 numpy arrays. The first contains the mean and length of eye movements in the horizontal direction and the second contains movements in the vertical direction. abra.session.Base.get_bubble_plot get_bubble_plot(self, trial_num = 1, image_file = None, screen_size = (1920, 1080)) A bubble plot is created to visualize fixation points during specified trial. image_file give the option to plot fixation points over imagea used during eye-tracking recording sessions. Parameters: trial_num: int, trial to plot fixation points image_file: string, image file path screen_size: list, Resolution dimension of the screen used. (Width, Height) Return: matplotlib plot : returns a bubble plot abra.session.Session Session(Base) Subclass of Base that hold whole trials Parameter: Base : [Base][#abrasessionBase] class Attributes: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Return: Session : returns a Session object abra.session.Epoch Epochs(Base) Subclass of Base that hold time locking epochs Parameter: Base : [Base][#abrasessionBase] class Attributes: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Return: Epoch : returns a Epoch object abra.Visualization Class Visualization(data, quality_list) Used to visualize pupil size and eye movements across trial time to inspect if plots resemble a good trial or bad trial. When Visualization object is created, it will create tkinter GUI application giving the options to move to the next trial, go to the previous trial, specify if the trial is good or bad, and save the quality list to to any directory. Parameters: data : Sessions or Epoch object quality_list : file path to quality list. Default is None Returns: Visualization : returns a Visualization object holding all information predefined including quality list. tkinter GUI : opens a tkinter GUI application to inspect trials.","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#abradata","text":"","title":"abra.data"},{"location":"api/#abradataread","text":"function abra.data.read(filename, eyes_recorded = \"auto\", both_eyes_recorded = False, mode=\"d\", start_msg=r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions. Read function will read in the ascii file and extract the data. Parameters: file_name : Takes in the name of the file you are trying to extract data from mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. eyes_recorded : Define which eye data to extract if both eyes are being recorded. default is \"auto\" which will take whichever eye it finds first both_eyes_recorded : True = if both eyes were recorded. False = is only the left or right eyes was being recorded. start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" Returns: abra.data.Data : The Data object","title":"abra.data.read"},{"location":"api/#abradataremove_eye_blinks","text":"function remove_eye_blinks(abra_obj, buffer=50, interpolate='linear', inplace=False) Takes in the data object made from the read function and removes eye blinks from the data. Parameters: abra_obj : data object buffer : Time in ms of a buffer to remove eye blinks from data. Default is set to 50ms interpolate : Option of whether you would like to interpolate the data. Default is \"linear\" None is the other option inplace : Option to remove eye blinks inplace or not Return: abra.data.Data : The Data object with eye blinks removed dataobj = abra.data.read(filename) rm_blink = abra.data.remove_eye_blinks(dataobj)","title":"abra.data.remove_eye_blinks"},{"location":"api/#abradatadata","text":"The data object is an object created by the read function. The object stores timestamps, start and end trial markers, sample rate, messages, event (fixation and saccade), pupil size, and eye movements. Parameters: timestamps List , List of timestamps within the eye-tracker data. sample_rate: int, The value of the sample rate of the data. messages: List , List of messages that are within the trials in the eye-tracker data. events: dict, The events dictionary of holds all event triggers within the data. The key is the event type and the value is the information that the event contained. trial_markers: dict, trial_markers is a dictionary that holds the timestamps of the start and end of the specified events. The keys are \"start\" and \"end\". pupil_size: List , The pupil_size list hold float values of the pupil size within the trials recorded. The pupil_size list has the same indexing as timestamps. eg. index 0 for pupil_size is correlated to the timestamp at timestamp index 0 movement: list , Movement is a 2d list that hold values for the x-axis and y-axis. Movement[0] is a list of movement coordinates at the x-axis. Movement[1] is a list of movement coordinates at the y-axis. Both list indexing is correlated to the indexing of timestamps. Return: Data : returns a data object Methods: create_session(self, conditions=None) create_epoch(self, event_timestamps, conditions=None, pre_event=200, post_event=200, pupil_baseline=None)","title":"abra.data.Data"},{"location":"api/#abradatadatacreate_session","text":"Method create_session(self, conditions=None) create_session is a function within the data object. The function will sort the data into a list of trial objects. This function will return a session object. Parameter: conditions : condition you want to apply to the method. Default is None Returns: Session : The Session object that contains a list of Trial objects. data = abra.data.read(filename) data.create_session()","title":"abra.data.Data.create_session"},{"location":"api/#abradatadatacreate_epochs","text":"Method create_epochs(self, event_timestamps, conditions=None, pre_event=200, post_event=200, pupil_baseline=None) The create_epoch function creates a list of time-locked epochs and returns an epoch object. Parameters: event_timestamps : Starting timestamps for all time locked events. conditions :Desired event condition. pre_event : Milliseconds before defined starting timestamps. post_event : Milliseconds after defined starting timestamps. pupil_baseline : Baselining for pupil size data. The baseline period will be the milliseconds before pre_event Return: Epoch : The Epoch objects that contains a list of the time locked trials data = abra.data.read(filename) data.create_epochs(conditions = None, pre_event = 200, post_event = 200, pupil_baseline = None)","title":"abra.data.Data.create_epochs"},{"location":"api/#abratrial","text":"","title":"abra.trial"},{"location":"api/#abratrialtrial","text":"Class Trial(self, timestamps, pupil_size, movement_X = [], movement_y = [], event_L = [], event_R = []) Parameters: timestamps : list of timestamps pupil_size : list of pupil sizes movement_X : list of movements in x-axis movement_y : list of movements in y-axis event_L : list of fixation events for the left eye event_R : list of fixation events for the right eye Return: Trial : returns a Trial object Method: abra.trial.Trial.summary","title":"abra.trial.Trial"},{"location":"api/#abratrailtrialsummary","text":"Method summary(self, verbose = False) Returns a dictionary of statistics of pupil data. Parameters: verbose: boolean, True will print the summary. Return: summary : Dictionary of summary statistic for pupil size containing, [mean]: pupil mean, [variance]: pupil variance, [stdev]: pupil standard deviation, [length]: pupil size, [min]: pupil minimum, [max]: pupil maximum","title":"abra.trail.Trial.summary"},{"location":"api/#abrasession","text":"","title":"abra.session"},{"location":"api/#abrasessionbase","text":"Class Base(self, data, sample_rate, conditions=None) Parameters: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Methods: summary(self, verbose = False) get_trial(self, trial_num) get_pupil(self) get_movement(self) get_timestamps(self) get_fixation(self) select(self, indexes) plot_pupil_size(self, trial_num = 1) plot_tragectory(self, trial_num = 1, image_file = None, screen_size = (1920,1080)) plot_xy(self, trial_num = 1) get_x_y(self, data) get_bubble_plot(self, trial_num = 1, image_file = None, screen_size = (1920, 1080))","title":"abra.session.base"},{"location":"api/#abrasessionbasesummary","text":"summary(self, verbose = False) Returns a dictionary that holds summary statistics for pupil size of all the trials in the base class. Parameter: verbose: boolean, True will print the summary. Return: summary : Dictionary of summary statistic for pupil size containing, [mean]: pupil mean, [variance]: pupil variance, [stdev]: pupil standard deviation, [length]: pupil size, [min]: pupil minimum, [max]: pupil maximum","title":"abra.session.Base.summary"},{"location":"api/#abrasessionbaseget_trial","text":"get_trial(self, trial_num) Will return the data from specified trial. Parameter: trial_num: int, trial number you want to find. Return: Trial object : Return Trial object by specified trial number","title":"abra.session.Base.get_trial"},{"location":"api/#abrasessionbaseget_pupil","text":"get_pupil(self) Returns a list pupil sizes in each trial Return: numpy array : a nested list of pupil sizes for each trial.","title":"abra.session.Base.get_pupil"},{"location":"api/#abrasessionbaseget_movement","text":"get_movement(self) Returns a list of eye movements in each trial Return: numpy array : a 2d array that holds eye movements in the x-axis at index 0 and movements in the y-axis at index 1. At each index there is a nested list for the movement direction per trial.","title":"abra.session.Base.get_movement"},{"location":"api/#abrasessionbaseget_timestamps","text":"get_timestamps(self) Returns a list of timestamps in each trial Return: numpy array : nested list of timestamps for each trial","title":"abra.session.Base.get_timestamps"},{"location":"api/#abrasessionbaseget_fixation","text":"get_fixation(self) Returns a list of eye movements during fixation for each trial. Return: numpy array : a 2d array that holds eye movements during fixation in the x-axis at index 0 and movements in the y-axis at index 1. At each index there is a nested list for the eye movement direction per trial.","title":"abra.session.Base.get_fixation"},{"location":"api/#abrasessionbaseselect","text":"select(self, indexes) Selects specified trial by index value. Return: Trial object : Return Trial object by specified index list of Trial objects","title":"abra.session.Base.select"},{"location":"api/#abrasessionbaseplot_pupil_size","text":"plot_pupil_size(self, trial_num = 1) Plots pupil size of the specified trial. Return: matplotlib plot : returns a plot","title":"abra.session.Base.plot_pupil_size"},{"location":"api/#abrasessionbaseplot_tragectory","text":"plot_tragectory(self, trial_num = 1, image_file = None, screen_size = (1920,1080)) Plots eye movement for specified trial. Can plot over image and specify dimension the screen used with eye-tracker. Paramters: trial_num: int, trial to plot eye movement image_file: string, file path to image screen_size: list, Resolution dimension of the screen used. (Width, Height) Return: matplotlib plot : returns a plot","title":"abra.session.Base.plot_tragectory"},{"location":"api/#abrasessionbaseplot_xy","text":"plot_xy(self, trial_num = 1) Plots horizontal and vertical eye movement across the time of the trial. Paramter: trial_num: int, trial to plot for eye movement Return: matplotlib plot : returns a plot","title":"abra.session.Base.plot_xy"},{"location":"api/#abrasessionbaseget_x_y","text":"get_x_y(self, data) Gets the mean and length of eye movement for each fixation in the specified trial. Paramter data : list of eye movements during fixation for specified trial Return: numpy array, numpy array : returns 2 numpy arrays. The first contains the mean and length of eye movements in the horizontal direction and the second contains movements in the vertical direction.","title":"abra.session.Base.get_x_y"},{"location":"api/#abrasessionbaseget_bubble_plot","text":"get_bubble_plot(self, trial_num = 1, image_file = None, screen_size = (1920, 1080)) A bubble plot is created to visualize fixation points during specified trial. image_file give the option to plot fixation points over imagea used during eye-tracking recording sessions. Parameters: trial_num: int, trial to plot fixation points image_file: string, image file path screen_size: list, Resolution dimension of the screen used. (Width, Height) Return: matplotlib plot : returns a bubble plot","title":"abra.session.Base.get_bubble_plot"},{"location":"api/#abrasessionsession","text":"Session(Base) Subclass of Base that hold whole trials Parameter: Base : [Base][#abrasessionBase] class Attributes: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Return: Session : returns a Session object","title":"abra.session.Session"},{"location":"api/#abrasessionepoch","text":"Epochs(Base) Subclass of Base that hold time locking epochs Parameter: Base : [Base][#abrasessionBase] class Attributes: data : List of Trial objects sample_rate : Hold the value of the sample rate that the trial was recorded with conditions : Condition that you want the data to be treated with. Return: Epoch : returns a Epoch object","title":"abra.session.Epoch"},{"location":"api/#abravisualization","text":"Class Visualization(data, quality_list) Used to visualize pupil size and eye movements across trial time to inspect if plots resemble a good trial or bad trial. When Visualization object is created, it will create tkinter GUI application giving the options to move to the next trial, go to the previous trial, specify if the trial is good or bad, and save the quality list to to any directory. Parameters: data : Sessions or Epoch object quality_list : file path to quality list. Default is None Returns: Visualization : returns a Visualization object holding all information predefined including quality list. tkinter GUI : opens a tkinter GUI application to inspect trials.","title":"abra.Visualization"},{"location":"create_epoch/","text":"abra.data.data.create_epoch: function The create_epoch function creates a list of time-locked epochs and returns an epoch object. Parameters event_timestamps: List Starting timestamps for all time locked events. conditions Desired event condition. pre_event: int Milliseconds before defined starting timestamps. post_event: int Milliseconds after defined starting timestamps. pupil_baseline: int Baselining for pupil size data. The baseline period will be the milliseconds before pre_event data = abra.data.read(filename) data.create_epoch(conditions = None, pre_event = 200, post_event = 200, pupil_baseline = None)","title":"abra.data.data.create_epoch: function"},{"location":"create_epoch/#abradatadatacreate_epoch-function","text":"The create_epoch function creates a list of time-locked epochs and returns an epoch object.","title":"abra.data.data.create_epoch: function"},{"location":"create_epoch/#parameters","text":"event_timestamps: List Starting timestamps for all time locked events. conditions Desired event condition. pre_event: int Milliseconds before defined starting timestamps. post_event: int Milliseconds after defined starting timestamps. pupil_baseline: int Baselining for pupil size data. The baseline period will be the milliseconds before pre_event data = abra.data.read(filename) data.create_epoch(conditions = None, pre_event = 200, post_event = 200, pupil_baseline = None)","title":"Parameters"},{"location":"create_session/","text":"abra.data.data.create_session: function create_session is a function within the data object. The function will sort the data into a list of trial objects. This function will return a session object. data = abra.data.read(filename) data.create_session()","title":"abra.data.data.create_session: function"},{"location":"create_session/#abradatadatacreate_session-function","text":"create_session is a function within the data object. The function will sort the data into a list of trial objects. This function will return a session object. data = abra.data.read(filename) data.create_session()","title":"abra.data.data.create_session: function"},{"location":"data/","text":"abra.data abra.data.read : function The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions Read method will read in the ascii file and extract the data Parameters file_name Takes in the name of the file you are trying to extract data from mode d = defualt u = user defined default will use the default start and end times given in the file user defined will take in start_msg and end_msg to use as the eyes_recorded: Define which eye data to extract if both eyes are being recorded \"left\", \"right\", \"auto\" default is \"auto\" which will take whichever eye it finds first both_eyes_recorded: True: if both eyes were recorded False: is only the left or right eyes was being recorded start and end marker \"start_msg\" will use regular expression to identify the user inputed message markers ex. r\"TRIAL \\d START\" \"end_msg\" will use regular expression to identify the user inputed end message makers ex. r\"TRIAL \\d END\" Returns Data Object abra.data.remove_eye_blinks : function Takes in the data object made from the read function and removes eye blinks from the data. abra.data.data : Object The data contains all important information that the eye-tracking information may have. This object is created using the read function.","title":"abra.data"},{"location":"data/#abradata","text":"abra.data.read : function The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions Read method will read in the ascii file and extract the data","title":"abra.data"},{"location":"data/#parameters","text":"file_name Takes in the name of the file you are trying to extract data from mode d = defualt u = user defined default will use the default start and end times given in the file user defined will take in start_msg and end_msg to use as the eyes_recorded: Define which eye data to extract if both eyes are being recorded \"left\", \"right\", \"auto\" default is \"auto\" which will take whichever eye it finds first both_eyes_recorded: True: if both eyes were recorded False: is only the left or right eyes was being recorded start and end marker \"start_msg\" will use regular expression to identify the user inputed message markers ex. r\"TRIAL \\d START\" \"end_msg\" will use regular expression to identify the user inputed end message makers ex. r\"TRIAL \\d END\" Returns Data Object abra.data.remove_eye_blinks : function Takes in the data object made from the read function and removes eye blinks from the data. abra.data.data : Object The data contains all important information that the eye-tracking information may have. This object is created using the read function.","title":"Parameters"},{"location":"dataobj/","text":"abra.data.data: object The data object is an object created by the read function. The object stores timestamps, start and end trial markers, sample rate, messages, event (fixation and saccade), pupil size, and eye movements Parameters timestamps: List List of timestamps within the eye-tracker data. sample_rate: int The value of the sample rate of the data. messages: List List of messages that are within the trials in the eye-tracker data. events: dict The events dictionary of holds all event triggers within the data. The key is the event type and the value is the information that the event contained. trial_markers: dict trial_markers is a dictionary that holds the timestamps of the start and end of the specified events. The keys are \"start\" and \"end\". pupil_size: List The pupil_size list hold float values of the pupil size within the trials recorded. The pupil_size list has the same indexing as timestamps. eg. index 0 for pupil_size is correlated to the timestamp at timestamp index 0 movement: list Movement is a 2d list that hold values for the x-axis and y-axis. Movement[0] is a list of movement coordinates at the x-axis. Movement[1] is a list of movement coordinates at the y-axis. Both list indexing is correlated to the indexing of timestamps. abra.data.data.create_session : function create_session is a function within the data object that will create a list of trial objects containing all information contained within predefined trials. This function will return a sessions object. abra.data.data.create_epoch : function create_epoch is a function within the data object that will create a list of predefined time-locked epochs. All information within the range of the time of the defined epoch will be contained. This function will return an epoch object.","title":"abra.data.data: object"},{"location":"dataobj/#abradatadata-object","text":"The data object is an object created by the read function. The object stores timestamps, start and end trial markers, sample rate, messages, event (fixation and saccade), pupil size, and eye movements","title":"abra.data.data: object"},{"location":"dataobj/#parameters","text":"timestamps: List List of timestamps within the eye-tracker data. sample_rate: int The value of the sample rate of the data. messages: List List of messages that are within the trials in the eye-tracker data. events: dict The events dictionary of holds all event triggers within the data. The key is the event type and the value is the information that the event contained. trial_markers: dict trial_markers is a dictionary that holds the timestamps of the start and end of the specified events. The keys are \"start\" and \"end\". pupil_size: List The pupil_size list hold float values of the pupil size within the trials recorded. The pupil_size list has the same indexing as timestamps. eg. index 0 for pupil_size is correlated to the timestamp at timestamp index 0 movement: list Movement is a 2d list that hold values for the x-axis and y-axis. Movement[0] is a list of movement coordinates at the x-axis. Movement[1] is a list of movement coordinates at the y-axis. Both list indexing is correlated to the indexing of timestamps. abra.data.data.create_session : function create_session is a function within the data object that will create a list of trial objects containing all information contained within predefined trials. This function will return a sessions object. abra.data.data.create_epoch : function create_epoch is a function within the data object that will create a list of predefined time-locked epochs. All information within the range of the time of the defined epoch will be contained. This function will return an epoch object.","title":"Parameters"},{"location":"license/","text":"MIT License Copyright (c) 2019 abra-eyetracking Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"module/","text":"Module abra.data abra.data.read abra.data.read(filename, eyes_recorded = \"auto\", both_eyes_recorded = False, mode=\"d\", start_msg=r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions. Read function will read in the ascii file and extract the data. Parameters: file_name : Takes in the name of the file you are trying to extract data from mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. eyes_recorded : Define which eye data to extract if both eyes are being recorded. default is \"auto\" which will take whichever eye it finds first both_eyes_recorded : True = if both eyes were recorded. False = is only the left or right eyes was being recorded. start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" Returns: abra.data.Data : the Data object abra.data.remove_eye_blinks : function Takes in the data object made from the read function and removes eye blinks from the data. abra.data.Data The data contains all important information that the eye-tracking information may have. This object is created using the read function. abra.read abra.remove_eye_blink abra.trial abra.sesison trial_inspect","title":"Module"},{"location":"module/#module","text":"","title":"Module"},{"location":"module/#abradata","text":"","title":"abra.data"},{"location":"module/#abradataread","text":"abra.data.read(filename, eyes_recorded = \"auto\", both_eyes_recorded = False, mode=\"d\", start_msg=r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions. Read function will read in the ascii file and extract the data. Parameters: file_name : Takes in the name of the file you are trying to extract data from mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. eyes_recorded : Define which eye data to extract if both eyes are being recorded. default is \"auto\" which will take whichever eye it finds first both_eyes_recorded : True = if both eyes were recorded. False = is only the left or right eyes was being recorded. start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" Returns: abra.data.Data : the Data object abra.data.remove_eye_blinks : function Takes in the data object made from the read function and removes eye blinks from the data.","title":"abra.data.read"},{"location":"module/#abradatadata","text":"The data contains all important information that the eye-tracking information may have. This object is created using the read function.","title":"abra.data.Data"},{"location":"module/#abraread","text":"","title":"abra.read"},{"location":"module/#abraremove_eye_blink","text":"","title":"abra.remove_eye_blink"},{"location":"module/#abratrial","text":"","title":"abra.trial"},{"location":"module/#abrasesison","text":"","title":"abra.sesison"},{"location":"module/#trial_inspect","text":"","title":"trial_inspect"},{"location":"read/","text":"abra.data.read The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions Read method will read in the ascii file and extract the data Parameters file_name Takes in the name of the file you are trying to extract data from mode d = defualt u = user defined default will use the default start and end times given in the file user defined will take in start_msg and end_msg to use as the eyes_recorded: Define which eye data to extract if both eyes are being recorded \"left\", \"right\", \"auto\" default is \"auto\" which will take whichever eye it finds first both_eyes_recorded: True: if both eyes were recorded False: is only the left or right eyes was being recorded start and end marker \"start_msg\" will use regular expression to identify the user inputed message markers ex. r\"TRIAL \\d START\" \"end_msg\" will use regular expression to identify the user inputed end message makers ex. r\"TRIAL \\d END\" Returns Data Object","title":"abra.data.read"},{"location":"read/#abradataread","text":"The read function is used to create a data object that will contain important information from the eye-tracking data file. The information stored are timestamps, pupil size, eye movements, messages, events, trial markers (start and end), and sample rates. You can use the parameters to create specialized data extractions Read method will read in the ascii file and extract the data","title":"abra.data.read"},{"location":"read/#parameters","text":"file_name Takes in the name of the file you are trying to extract data from mode d = defualt u = user defined default will use the default start and end times given in the file user defined will take in start_msg and end_msg to use as the eyes_recorded: Define which eye data to extract if both eyes are being recorded \"left\", \"right\", \"auto\" default is \"auto\" which will take whichever eye it finds first both_eyes_recorded: True: if both eyes were recorded False: is only the left or right eyes was being recorded start and end marker \"start_msg\" will use regular expression to identify the user inputed message markers ex. r\"TRIAL \\d START\" \"end_msg\" will use regular expression to identify the user inputed end message makers ex. r\"TRIAL \\d END\" Returns Data Object","title":"Parameters"},{"location":"remove_eye_blink/","text":"abra.data.remove_eye_blinks Removes eye blinks from the data object. Parameters abra_obj: object data object buffer: int Time in ms of a buffer to remove eye blinks from data. Default is set to 50ms interpolate: string Option of whether you would like to interpolate the data. Default is \"linear\" None is the other option inplace: boolean Option to remove eye blinks inplace or not Return Data object with eye blinks removed dataobj = abra.data.read(filename) rm_blink = abra.data.remove_eye_blinks(dataobj)","title":"abra.data.remove_eye_blinks"},{"location":"remove_eye_blink/#abradataremove_eye_blinks","text":"Removes eye blinks from the data object.","title":"abra.data.remove_eye_blinks"},{"location":"remove_eye_blink/#parameters","text":"abra_obj: object data object buffer: int Time in ms of a buffer to remove eye blinks from data. Default is set to 50ms interpolate: string Option of whether you would like to interpolate the data. Default is \"linear\" None is the other option inplace: boolean Option to remove eye blinks inplace or not Return Data object with eye blinks removed dataobj = abra.data.read(filename) rm_blink = abra.data.remove_eye_blinks(dataobj)","title":"Parameters"},{"location":"sessions/","text":"","title":"Sessions"},{"location":"trial/","text":"Parameter: test1 test2 Header Title Paragraph Text","title":"Trial"},{"location":"trial_check/","text":"Terminal Application trial_inspect Called in the terminal to open the Visualization GUI application to inspect trials. A file path must be inputed to run the application. The trial_inspect app will allow you to inspect an .asc eye-tracking data file. trial_inspect will create plots of pupil size and eye movement (x-axis and y-axis) over trial time. While inspecting each trial, you will be able to label the trial as either good(1) or bad(0). The quality list defaults to all trials as good. If a previous quality list exists, you will be able to load it in. After inspection, the option to save quality list will be given. Parameters: filename : required argument that specified the file path to the eye-tracking data the -- are required for all parameters except filename and are considered optional parameters. --eyes_recorded : Define which eye data to extract \"left\", \"right\", \"auto\" --both_eyes_recorded : True if both eyes were recorded. False is only the left or right eyes was being recorded --mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. --start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" --end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" --create_epoch : True creates timelocking epochs and False creates session by trials --rm_blinks : True removes eye blinks from data and False keeps eye blinks --buffer : Buffer size for eye blink removal --interpolate : Interpolation type. (Default is linear) for eye blink removal --event_condition_file : path to a .csv file that holds timestamps and conditions for time locking epoch --pre_event : milliseconds before defined starting timestamps for time locking epoch --post_event : milliseconds after defined starting timestamps for time locking epoch --pupil_baseline : Baselining for pupil size data Example: In Terminal python3 abra-eyetracking/trial_inspect.py ~/Documents/Github/abra-eyetracking/test/asc/filename.asc","title":"Terminal Application"},{"location":"trial_check/#terminal-application","text":"","title":"Terminal Application"},{"location":"trial_check/#trial_inspect","text":"Called in the terminal to open the Visualization GUI application to inspect trials. A file path must be inputed to run the application. The trial_inspect app will allow you to inspect an .asc eye-tracking data file. trial_inspect will create plots of pupil size and eye movement (x-axis and y-axis) over trial time. While inspecting each trial, you will be able to label the trial as either good(1) or bad(0). The quality list defaults to all trials as good. If a previous quality list exists, you will be able to load it in. After inspection, the option to save quality list will be given. Parameters: filename : required argument that specified the file path to the eye-tracking data the -- are required for all parameters except filename and are considered optional parameters. --eyes_recorded : Define which eye data to extract \"left\", \"right\", \"auto\" --both_eyes_recorded : True if both eyes were recorded. False is only the left or right eyes was being recorded --mode : 'd' = default, use the default start and end times given in the file. 'u' = user defined, take in start_msg and end_msg to use as the. --start_msg : use regular expression to identify the user inputed start message markers, ex. r\"TRIAL \\d START\" --end_msg : use regular expression to identify the user inputed end message makers, ex. r\"TRIAL \\d END\" --create_epoch : True creates timelocking epochs and False creates session by trials --rm_blinks : True removes eye blinks from data and False keeps eye blinks --buffer : Buffer size for eye blink removal --interpolate : Interpolation type. (Default is linear) for eye blink removal --event_condition_file : path to a .csv file that holds timestamps and conditions for time locking epoch --pre_event : milliseconds before defined starting timestamps for time locking epoch --post_event : milliseconds after defined starting timestamps for time locking epoch --pupil_baseline : Baselining for pupil size data Example: In Terminal python3 abra-eyetracking/trial_inspect.py ~/Documents/Github/abra-eyetracking/test/asc/filename.asc","title":"trial_inspect"},{"location":"tutorial/","text":"Tutorial If you haven't already, download the ABRA eye-tracking package. pip install abra To start you will need to import ABRA package and read in you .asc eye-tracking data file. import abra.data as abra data = abra.read(filename) ''' for user user defined trial makers data = abra.read(filename, mode = u, start_msg = r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") ''' A","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"If you haven't already, download the ABRA eye-tracking package. pip install abra To start you will need to import ABRA package and read in you .asc eye-tracking data file. import abra.data as abra data = abra.read(filename) ''' for user user defined trial makers data = abra.read(filename, mode = u, start_msg = r\"TRIAL \\d{1,2} START\", end_msg=r\"TRIAL \\d{1,2} END\") ''' A","title":"Tutorial"}]}